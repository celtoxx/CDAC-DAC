Q1.Array occurrences: occurrence of each element in array

import java.util.*;
public class arrays {
   public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter the size of array");
		int a[] = new int[sc.nextInt()];
		//taking size as input from user
		System.out.println("Enter the elements of array");
		//taking elements as input
		for (int i = 0; i < a.length; i++) {
			a[i] = sc.nextInt();
		}
		System.out.println("Elements of array: ");
		//printing array elements
		for(int i=0; i<a.length; i++) {
		    System.out.print(a[i]+" ");
		}
		System.out.println();
		//sorting array

		int temp = 0;

		for (int i = 0; i < a.length; i++) {
			for (int j = i + 1; j < a.length; j++) {
				if (a[i] > a[j]) {
					temp = a[i];
					a[i] = a[j];
					a[j] = temp;
				}
			}
		}
		int count = 0;//to count the frequency
		int i = 0;//loop iterator
    for (int j = i + 1; j < a.length; j++) {//traversing through the array
			//track the just next element to i'th index
			if (a[i] == a[j]) {//if element matches then count++
				count++;
			} else {
			 System.out.println("frequency of element " + a[i] + " is " + (count + 1));
				//print count+1 because there will be atleast one element
				i = j;//reset the i'th index
				count = 0;//reset the count
			}
		}
		System.out.println("frequency of element " + a[a.length - 1] + " is " + (count + 1));
		// the last element will be left untracked
		//so this statement is specially for last element
	}
}

Optimized sol:

public class Main{

  public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter the size of array");
		int a[] = new int[sc.nextInt()];
		//taking size as input from user
		System.out.println("Enter the elements of array");
		//taking elements as input
		for (int i = 0; i < a.length; i++) {
			a[i] = sc.nextInt();
		}
		System.out.println("Elements of array: ");
		//printing array elements
		for(int i=0; i<a.length; i++) {
		    System.out.print(a[i]+" ");
		}
		System.out.println();
       
		int count=0;
		for(int i=0;i<a.length;i++){
		    count=0;
		    for(int j=0;j<a.length;j++){
		        if((j<i)&&(a[i]==a[j])){
		            break;
		        }
		        else if(a[i]==a[j]){
		            count++;
		        }
		        
		    }
		    if(count>0){System.out.println("freq of "+a[i]+ " is "+count);}
		}
		
		
	}
}


Q2. maximum subarray sum

class Solution {
    public int maxSubArray(int[] nums) {
        int currsum=nums[0];
        int maxsum=nums[0];
        for(int i=1;i<nums.length;i++){
            currsum=Math.max(nums[i],currsum+nums[i]);
            maxsum=Math.max(maxsum,currsum);
        }
        return maxsum;
        
    }
}

Q3. Number of steps
Partially solved only one test case fails. expected output for testcase 4:3056888 ,my output:3055925.
https://www.hackerearth.com/practice/basic-programming/input-output/basics-of-input-output/practice-problems/algorithm/make-all-equal-90a21ab2/

import java.util.*;
class TestClass {
     public static void main(String args[] ) throws Exception {
       
        Scanner sc=new Scanner(System.in);
        int size=sc.nextInt();
        int x=1;
        int[] a=new int[size];
        int[] b=new int[size];
        for (int i = 0; i < a.length; i++) {
			a[i] = sc.nextInt();
		}
        for (int i = 0; i < a.length; i++) {
			b[i] = sc.nextInt();
		}
        int temp=0;
        int smallest=a[0];
        for(int i=0;i<a.length;i++){
            smallest=Math.min(smallest,a[i]);
        }
        
        for(int i=0;i<a.length;i++){
           
               if(a[i]<b[i]){
				   x=0;break;
			   } 
               while(a[i]>smallest){
                    a[i]=a[i]-b[i];
					temp++;
                    if(a[i]+1<smallest){
						x=0;break;
                    }
               }  
	                
        }        
        if(x==1){System.out.println(temp);}else{System.out.println(-1);}  
     } 
}


4. Roman to Int


class Solution {
    public int romanToInt(String s) {
    int sum = 0;
    int prev = 0;
    for (int i=s.length()-1; i>=0;i--){
        int curr=romanToInt(s.charAt(i));
        if (curr<prev) {
            sum-=curr;
        } else {
            sum+=curr;
        }
        prev=curr;
    }
    return sum;
    }
    public static int romanToInt(char c) {
        switch (c) {
            case 'I':
                return 1;
            case 'V':
                return 5;
            case 'X':
                return 10;
            case 'L':
                return 50;
            case 'C':
                return 100;
            case 'D':
                return 500;
            case 'M':
                return 1000;
            default:
                return 0;
        }
    }
}




5.Maximum border
https://www.hackerearth.com/practice/basic-programming/input-output/basics-of-input-output/practice-problems/algorithm/maximum-border-9767e14c/

import java.util.Scanner;
class TestClass {
    public static void main(String args[]) throws Exception {
		Scanner sc = new Scanner(System.in);
		int testcase = sc.nextInt();
		while(testcase>0){
        int rows = sc.nextInt();
		int cols = sc.nextInt();
		String[] s = new String[rows];
		int max = 0;
		int max1 = 0;
		int max2 = 0;
		for (int i = 0; i < rows; i++) {
			s[i] = sc.next();
		}
		// for (int i = 0; i < rows; i++) {
		// 	System.out.println(s[i]);
		// }

        for(int i=0;i<rows;i++){max=0;
            for(int j=1;j<(cols);j++){
                
                if(((s[i].charAt(j-1))=='#') && ((s[i].charAt(j))=='#')){
                    max++;
                }
            }
            max1=Math.max(max+1,max1);
        }
        // System.out.println(max1);

        for(int i=1;i<rows;i++){max=1;
            for(int j=0;j<cols;j++){
                
                if((s[i-1].charAt(j))=='#' && (s[i].charAt(j))=='#'){
                    max++;
                }
            }
            max2=Math.max(max,max2);
        }
        System.out.println(Math.max(max1,max2));
        testcase--;
        }  
	}
}
